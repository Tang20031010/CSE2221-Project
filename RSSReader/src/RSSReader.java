import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Coney Tang
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        /*
         * Get the position of title element in xmlTree xml, and declare a
         * variable title of string type with "No title" if there is no title
         * element; if there is title, value of title will be the content of
         * title element
         */
        String title = "Empty Title";
        int titlePosition = getChildElement(channel, "title");
        if (channel.child(titlePosition).numberOfChildren() >= 1) {
            title = channel.child(titlePosition).child(0).label();
        }
        /*
         * Get the position of description element in xmlTree xml, and declare a
         * variable description of string type with "No description" if there is
         * no description element; if there is a description element, value of
         * description will be the content of description element
         */
        String description = "No description";
        int descriptionPosition = getChildElement(channel, "description");
        if (channel.child(descriptionPosition).numberOfChildren() >= 1) {
            description = channel.child(descriptionPosition).child(0).label();
        }
        /*
         * Get the position of link element in xmlTree xml, and declare a
         * variable link of string type; if there is a link element, value of
         * link will be the content of link element
         */
        String link = "";
        int linkPosition = getChildElement(channel, "link");
        if (channel.child(linkPosition).numberOfChildren() >= 1) {
            link = channel.child(linkPosition).child(0).label();
        }
        /*
         * Output the "opening" tags in the generated HTML file
         */
        out.println("<html>");
        out.println("  <head>");
        out.println("    <title>" + title + "</title>");
        out.println("  </head>");
        out.println("  <body>");
        out.println(
                "    <h1><a href = \"" + link + "\">" + title + "</a></h1>");
        out.println("    <p>" + description + "</p>");
        out.println("    <table border=\"1\">");
        out.println("      <tr>");
        out.println("        <th>Date</th>");
        out.println("        <th>Source</th>");
        out.println("        <th>News</th>");
        out.println("      </tr>");
        /*
         * Call the processItem repeatedly to output the element in different
         * item element in xmlTree channel
         */
        int i = 0;
        int numChild = channel.numberOfChildren();
        while (numChild > i) {
            if (channel.child(i).isTag()) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), out);
                }
            }
            i++;
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("    </table>");
        out.println("  </body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        /*
         * Compare content of child element with tag repeatedly and return the
         * index of the first occurrence of the given tag; return -1 if nothing
         * is found
         */
        int position = -1;
        int count = 0;
        int i = 0;
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).isTag()) {
                if (xml.child(i).label().equals(tag) && count < 1) {
                    position = i;
                    count++;
                }
            }
            i++;
        }
        return position;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("      <tr>");
        /*
         * Get the position of pubDate element in xmlTree item, and declare a
         * variable data of string type with "No date available"; if there is a
         * pubDate element, value of date will be the content of pubDate element
         */
        String date = "No date available";
        int datePosition = getChildElement(item, "pubDate");
        if (datePosition != -1
                && item.child(datePosition).numberOfChildren() >= 1) {
            date = item.child(datePosition).child(0).label();
        }
        out.println("        <th>" + date + "</th>");
        /*
         * Get the position of the source element in xmlTree item, and declare a
         * variable source of string type with "No source available"; if there
         * is a source element with a child, assign its content as value to
         * variable source and its url attribute value as value to variable
         * sourceLink; if it does not have a child, the source name will be the
         * url
         */
        String source = "No source available";
        String sourceLink = "";
        int sourcePosition = getChildElement(item, "source");
        if (sourcePosition != -1
                && item.child(sourcePosition).numberOfChildren() >= 1) {
            sourceLink = item.child(sourcePosition).attributeValue("url");
            source = item.child(sourcePosition).child(0).label();
            out.println("        <th><a href=\"" + sourceLink + "\">" + source
                    + "</a>" + "</th>");
        } else if (sourcePosition != -1
                && item.child(sourcePosition).numberOfChildren() < 1) {
            sourceLink = item.child(sourcePosition).attributeValue("url");
            out.println("        <th><a href=\"" + sourceLink + "\">"
                    + sourceLink + "</a>" + "</th>");
        } else {
            out.println("        <th> " + source + "</th>");
        }

        /*
         * Get the position of title element in xmlTree item, and declare a news
         * variable with value "No title available"; if there is title, assign
         * its content as value to news; if there is no title but has
         * description, assign its value to the variable news
         */
        String news = "No title available";
        int titlePosition1 = getChildElement(item, "title");
        int descriptionPosition1 = getChildElement(item, "description");
        if (titlePosition1 != -1
                && item.child(titlePosition1).numberOfChildren() >= 1) {
            news = item.child(titlePosition1).child(0).label();
        } else if (descriptionPosition1 != -1
                && item.child(descriptionPosition1).numberOfChildren() >= 1) {
            news = item.child(descriptionPosition1).child(0).label();
        }
        /*
         * Get the position of link element in xmlTree xml, and declare a
         * variable link of string type; if there is a link element, value of
         * link will be the content of link element; or it will just print out
         * the title for the news without a link
         */
        String link = "";
        int linkPosition1 = getChildElement(item, "link");
        if (linkPosition1 != -1
                && item.child(linkPosition1).numberOfChildren() >= 1) {
            link = item.child(linkPosition1).child(0).label();
            out.println("        <th><a href=\"" + link + "\">" + news + "</a>"
                    + "</th>");
        } else {
            out.println("        <th>" + news + "</th>");
        }
        /*
         * Output the closing tag for HTML table row
         */
        out.println("      </tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        /*
         * Open input and output stream
         */
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Ask user for a URL
         */
        out.println("Please enter a URL of an RSS 2.0 feed: ");
        String userInput = in.nextLine();
        /*
         * Declare and initialize a variable xml of type XMLTree
         */
        XMLTree xml = new XMLTree1(userInput);
        /*
         * Declare and initialize a variable channel
         */
        XMLTree channel = xml;
        /*
         * If the label of the root of XMLTree is an <rss> tag and has a version
         * attribute with value "2.0", assign first child of xml as value to
         * variable channel
         */
        if (xml.isTag() && xml.label().equals("rss")) {
            if (xml.hasAttribute("version")
                    && xml.attributeValue("version").equals("2.0")) {
                channel = xml.child(0);
            }
        }
        /*
         * Ask user for the file name
         */
        out.println("Please enter the output file name: ");
        String fileName = in.nextLine();
        /*
         * Open the output stream
         */
        SimpleWriter fileOut = new SimpleWriter1L(fileName);
        /*
         * Call the method outputHeader
         */
        outputHeader(channel, fileOut);
        /*
         * Call the method outputFooter
         */
        outputFooter(fileOut);
        /*
         * close input and output stream
         */
        in.close();
        out.close();
        fileOut.close();
    }

}
